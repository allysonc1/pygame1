# 1. import pygameimport pygameimport random# from the math module built into python, get the fabs objectfrom math import fabsglobal FPSCLOCK# 2. Init pygamepygame.init()FPSCLOCK = pygame.time.Clock()#3. create a screen with a particular size#the screen size must be a tuplescreen_size = (512,480)# actually tell pygame to set the screen up and store itpygame_screen = pygame.display.set_mode(screen_size)## set a pointless captionpygame.display.set_caption("Goblin_Chase")# set up a wvar with our imagebackground_image = pygame.image.load('./images/background.png')hero_image = pygame.image.load('./images/hero.png')goblin_image = pygame.image.load('./images/goblin.png')monster_image = pygame.image.load('./images/monster.png')mouseClicked = False# 8.. Set up the hero locationhero = {	"x": 100,	"y": 100,	"speed": 20,	"wins": 0}#make a font so we can write on the screenfont = pygame.font.Font(None, 25)wins_text = font.render("Wins: %d" % (hero['wins']), True, (0,0,0))#set up the goblin location goblin = {	"x": 200,	"y": 200,	"speed": 2,	"wins": 0}#set up the monster location monster = {	"x": 300,	"y": 300,	"speed": 15,	"wins": 0}moveCharacter = "none"keys = {	"up": 273,	"down": 274,	"right": 275,	"left": 276}keys_down = {	"up": False,	"down": False,	"left": False,	"right": False}# 4.create a game loop (While)# create a boolean for whether the game should be going or notgame_on = Truewhile game_on:	# we are inside the main game loop	# it will keep running as long as our bool is true	# 5. add a quit event (python needs an escape)	# pygame comes with an event loop (sort of like JS)	for event in pygame.event.get():		# we're after the quit event		if (event.type == pygame.QUIT):			# The user clicked the red x in the top left			game_on = False		elif event.type == pygame.KEYDOWN:			# print "User pressed a key!"			if event.key == keys['up']:				keys_down['up']= True				# user pressed up!!				# hero['y'] -= hero['speed']			elif event.key == keys['down']:				keys_down['down'] = True				# hero['y'] += hero['speed']			elif event.key == keys['left']:				keys_down['left'] = True				# hero['y'] += hero['speed']			elif event.key == keys['right']:				keys_down['right'] = True				# hero['x'] += hero['speed']				#		elif event.type == pygame.KEYUP:			# the user let go of a key. see if it's one that matters.			# if user let go of the up key, Flip the boolean.			if event.key == keys['up']:				keys_down['up'] = False			if event.key == keys['down']:				keys_down['down'] = False			if event.key == keys['left']:				keys_down['left'] = False			if event.key == keys['right']:				keys_down['right'] = False		# if the user has clicked the mouse button, check to see 		# if it was on the hero or a monster		elif event.type == pygame.MOUSEBUTTONUP:			mousex, mousey = event.pos			mouseClicked = True			moveCharacter = 'none'	if mouseClicked == True:		# heroPlusX = hero[]		if mousex >= hero['x'] and mousex <= (hero['x'] + 32):			if mousey >= hero['y'] and mousey <= (hero['y'] + 32):				print "mouse clicked the hero"				moveCharacter = 'hero'				mouseClicked = False		# elif mousex >= goblin['x'] and mousex <= (goblin['x'] + 32):		# 	if mousey >= goblin['y'] and mousey <= (goblin['y'] + 32):		# 		print "mouse clicked the goblin"		# 		moveCharacter = 'goblin'		# 		mouseClicked = False			elif mousex >= monster['x'] and mousex <= (monster['x'] + 32):			if mousey >= monster['y'] and mousey <= (monster['y'] + 32):				print "mouse clicked the monster"				moveCharacter = 'monster'				mouseClicked = False	if moveCharacter == 'hero':	# the key may be up or down to move the hero	# the images are 32 x 32		if keys_down['up']:			hero['y'] -= hero['speed']		elif keys_down['down']:			hero['y'] += hero['speed']		# the key may be right or left		if keys_down['left']:			hero['x'] -= hero['speed']		elif keys_down['right']:			hero['x'] += hero['speed']	# COLLISION DETECTION!!   (absolute value - don't care which axis- just find distances < 32, they're	#. touching). fabs = floating pt absolute	distance_between = fabs(hero['x'] - goblin['x']) + fabs(hero['y'] - goblin['y'])	if distance_between < 32:		print 'collision between hero and goblin!'	distance_between = fabs(hero['x'] - monster['x']) + fabs(hero['y'] - monster['y'])	if distance_between < 32:		print 'collision between hero and monster!'		# ...some more of your code goes here...		# pygame.mixer.music.stop()		# # Loading and playing a sound effect:		# dyingObj = pygame.mixer.Sound('./sounds/music.wav')		# dyingObj.play()		distance_between = fabs(monster['x'] - goblin['x']) + fabs(monster['y'] - goblin['y'])	if distance_between < 32:		print 'collision between monster and goblin!'			#make a font so we can write on the screen	font = pygame.font.Font(None, 25)	wins_text = font.render("Wins: %d" % (hero['wins']), True, (0,0,0))	# Goblin always moves randomly	goblinRandomMove = random.randint(1,4)	if (goblinRandomMove == 1):		goblin['y'] -= goblin['speed']		if (int(goblin['y']) > 480):			goblin['y'] = 480		elif (int(goblin['y'])) < 0:			goblin['y'] = 0	elif (goblinRandomMove == 2):		goblin['y'] += goblin['speed']		if (int(goblin['y']) > 480):			goblin['y'] = 480		elif (int(goblin['y']) < 0):			goblin['y'] = 0	elif (goblinRandomMove == 3):		goblin['x'] -= goblin['speed']		if (int(goblin['x']) > 512):			goblin['x'] = 512		elif (int(goblin['y']) < 0):			goblin['x'] = 0	elif (goblinRandomMove == 4):		goblin['x'] += goblin['speed']		if (int(goblin['x']) > 512):			goblin['x'] = 512		elif (int(goblin['y']) < 0):			goblin['x'] = 0		# elif keys_down['right']:	# the key may be up or down to move the goblin		# if keys_down['up']:		# 	goblin['y'] -= goblin['speed']		# elif keys_down['down']:		# 	goblin['y'] += goblin['speed']		# # the key may be right or lefti		# if keys_down['left']:		# 	goblin['x'] -= goblin['speed']		# elif keys_down['right']:		# 	goblin['x'] += goblin['speed']	if moveCharacter == 'monster':	# the key may be up or down to move the monster		if keys_down['up']:			monster['y'] -= monster['speed']		elif keys_down['down']:			monster['y'] += monster['speed']		# the key may be right or lefti		if keys_down['left']:			monster['x'] -= monster['speed']		elif keys_down['right']:			monster['x'] += monster['speed']				# 6. fill in the screen with a color (or image)		# blit takes 2 arguments		# 1. what do you want to draw		# 2. where do you want to draw it [0,0]	pygame_screen.blit(background_image, [0,0])	# this must have a list	pygame_screen.blit(hero_image, [hero['x'], hero['y']])	pygame_screen.blit(goblin_image, [goblin['x'], goblin['y']])	pygame_screen.blit(monster_image, [monster['x'], monster['y']])	# Loading and playing background music:	# pygame.mixer.music.load('./sounds/music.wav')	# pygame.mixer.music.play(-1, 0.0)		# 7.  repeat 6 over and over over...	pygame.display.flip()